#!/usr/bin/python3
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Test case 1: Valid integer value
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

# Test case 2: Valid integer value
>>> bg.integer_validator("width", 89)

# Test case 3: Non-integer value
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test case 4: Zero value
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test case 5: Negative value
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test case 6: Float value
>>> try:
...     bg.integer_validator("height", 10.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] height must be an integer

# Test case 7: List value
>>> try:
...     bg.integer_validator("sides", [3, 4, 5])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] sides must be an integer

# Test case 8: Dictionary value
>>> try:
...     bg.integer_validator("angles", {"a": 90, "b": 90, "c": 90})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] angles must be an integer

# Test case 9: Tuple value
>>> try:
...     bg.integer_validator("coordinates", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] coordinates must be an integer

# Test case 10: Set value
>>> try:
...     bg.integer_validator("elements", {1, 2, 3})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] elements must be an integer
